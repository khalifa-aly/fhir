<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="localization"> </a>
<h3>Localization</h3>
<p>
  All of the elements reflected on a canonical resource are the assertions as made by the original author/publisher 
  and do NOT reflect divergent local usage expectations. If a system has a need to capture local usage requirements 
  (e.g. local deprecation, local 'active' use past the point of deprecation/retirement by the official source, 
  alternative effective periods, etc.), those assertions should be made in a separate resource (e.g. 
  <a href="list.html">List</a>, <a href="artifactassessment.html">ArtifactAssessment</a>, etc.) that focuses on 
  approval/usage of referenced resources, not on the canonical/metadata resource itself.  Alternatively, a separate 
  resource might be defined that 'derives' from the original resource and can have its own properties.
</p>
<p>
  There is however, a possibility of local changes on 'generated' elements such as <a href="valueset.html">ValueSet</a> 
  expansions, <a href="structuredefinition.html">StructureDefinition</a> snapshots, etc. In this case:
</p>
<ul>
  <li>If the source of truth is providing expansions, snapshot generation or similar "generated" elements, then it is 
    not a good idea for downstream servers to update/override them.</li>
  <li>If the source of truth is NOT providing those generated elements, then it is reasonable for downstream servers to 
    generate them (and update them from time to time). If this happens, it is possible that different servers will have 
    different generated elements. This would not be considered a violation of the guidelines proposed above.</li>
</ul>
<p>
  HL7 is developing a <a href="[%ig crmi%]">Canonical Resource Management</a> implementation guide 
  to define best practices for asserting and exposing local usage expectations of canonical and metadata resources.
  Readers are invited to consult the current release of that IG for additional guidance.
</p>

<a name="comparison"> </a>
<h3>Version Comparison</h3>

<p>
Canonical resources may have both a version, and a version algorithm. In normal
usage, implementers are strongly recommended to version all the canonical resources
that they maintain. The difference between the CanonicalResource version (business version)
and the Resource version in <code>.meta.version</code> is discussed 
<a href="resource.html#versions">on Resource</a>.
</p>
<p>
The version algorithm allows applications to choose the correct latest version of a 
resource, since there is no general algorithm that chooses the latest version across
all versioning schemes in place.
</p>
<p>
Implementers are encouraged to use semantic versioning, but may have existing approaches
that are already adopted.
</p>

[%impl-note%]
This mechanism we have for defining version comparison algorithm, where each
version of the resource makes its own claim about how version comparison works
is inelegant and feels somewhat clunky, but that was the best that the committee identified 
that would work in all circumstances. Alternative proposals that could be used 
to address the problem that would be less onerous are welcome.
[%end-note%]

</div>
